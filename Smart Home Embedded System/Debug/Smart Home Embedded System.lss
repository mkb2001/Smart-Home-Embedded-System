
Smart Home Embedded System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000003d8  0000044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000046a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e33  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ae  00000000  00000000  000013d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ef  00000000  00000000  00001b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00002370  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b0  00000000  00000000  000024b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000783  00000000  00000000  00002968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000030eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ce 01 	call	0x39c	; 0x39c <main>
  7a:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_vsetPINDir>:
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
  82:	82 34       	cpi	r24, 0x42	; 66
  84:	19 f1       	breq	.+70     	; 0xcc <DIO_vsetPINDir+0x4a>
  86:	18 f4       	brcc	.+6      	; 0x8e <DIO_vsetPINDir+0xc>
  88:	81 34       	cpi	r24, 0x41	; 65
  8a:	39 f0       	breq	.+14     	; 0x9a <DIO_vsetPINDir+0x18>
  8c:	08 95       	ret
  8e:	83 34       	cpi	r24, 0x43	; 67
  90:	b1 f1       	breq	.+108    	; 0xfe <DIO_vsetPINDir+0x7c>
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_vsetPINDir+0x16>
  96:	4c c0       	rjmp	.+152    	; 0x130 <DIO_vsetPINDir+0xae>
  98:	08 95       	ret
  9a:	41 30       	cpi	r20, 0x01	; 1
  9c:	59 f4       	brne	.+22     	; 0xb4 <DIO_vsetPINDir+0x32>
  9e:	2a b3       	in	r18, 0x1a	; 26
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_vsetPINDir+0x28>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_vsetPINDir+0x24>
  ae:	82 2b       	or	r24, r18
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	08 95       	ret
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_vsetPINDir+0x3e>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_vsetPINDir+0x3a>
  c4:	80 95       	com	r24
  c6:	82 23       	and	r24, r18
  c8:	8a bb       	out	0x1a, r24	; 26
  ca:	08 95       	ret
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	59 f4       	brne	.+22     	; 0xe6 <DIO_vsetPINDir+0x64>
  d0:	27 b3       	in	r18, 0x17	; 23
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_vsetPINDir+0x5a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_vsetPINDir+0x56>
  e0:	82 2b       	or	r24, r18
  e2:	87 bb       	out	0x17, r24	; 23
  e4:	08 95       	ret
  e6:	27 b3       	in	r18, 0x17	; 23
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_vsetPINDir+0x70>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_vsetPINDir+0x6c>
  f6:	80 95       	com	r24
  f8:	82 23       	and	r24, r18
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	08 95       	ret
  fe:	41 30       	cpi	r20, 0x01	; 1
 100:	59 f4       	brne	.+22     	; 0x118 <DIO_vsetPINDir+0x96>
 102:	24 b3       	in	r18, 0x14	; 20
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_vsetPINDir+0x8c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_vsetPINDir+0x88>
 112:	82 2b       	or	r24, r18
 114:	84 bb       	out	0x14, r24	; 20
 116:	08 95       	ret
 118:	24 b3       	in	r18, 0x14	; 20
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_vsetPINDir+0xa2>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_vsetPINDir+0x9e>
 128:	80 95       	com	r24
 12a:	82 23       	and	r24, r18
 12c:	84 bb       	out	0x14, r24	; 20
 12e:	08 95       	ret
 130:	41 30       	cpi	r20, 0x01	; 1
 132:	59 f4       	brne	.+22     	; 0x14a <DIO_vsetPINDir+0xc8>
 134:	21 b3       	in	r18, 0x11	; 17
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_vsetPINDir+0xbe>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_vsetPINDir+0xba>
 144:	82 2b       	or	r24, r18
 146:	81 bb       	out	0x11, r24	; 17
 148:	08 95       	ret
 14a:	21 b3       	in	r18, 0x11	; 17
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_vsetPINDir+0xd4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_vsetPINDir+0xd0>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	81 bb       	out	0x11, r24	; 17
 160:	08 95       	ret

00000162 <DIO_write>:
 162:	82 34       	cpi	r24, 0x42	; 66
 164:	19 f1       	breq	.+70     	; 0x1ac <DIO_write+0x4a>
 166:	18 f4       	brcc	.+6      	; 0x16e <DIO_write+0xc>
 168:	81 34       	cpi	r24, 0x41	; 65
 16a:	39 f0       	breq	.+14     	; 0x17a <DIO_write+0x18>
 16c:	08 95       	ret
 16e:	83 34       	cpi	r24, 0x43	; 67
 170:	b1 f1       	breq	.+108    	; 0x1de <DIO_write+0x7c>
 172:	84 34       	cpi	r24, 0x44	; 68
 174:	09 f4       	brne	.+2      	; 0x178 <DIO_write+0x16>
 176:	4c c0       	rjmp	.+152    	; 0x210 <DIO_write+0xae>
 178:	08 95       	ret
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	59 f4       	brne	.+22     	; 0x194 <DIO_write+0x32>
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_write+0x28>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_write+0x24>
 18e:	82 2b       	or	r24, r18
 190:	8b bb       	out	0x1b, r24	; 27
 192:	08 95       	ret
 194:	2b b3       	in	r18, 0x1b	; 27
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_write+0x3e>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_write+0x3a>
 1a4:	80 95       	com	r24
 1a6:	82 23       	and	r24, r18
 1a8:	8b bb       	out	0x1b, r24	; 27
 1aa:	08 95       	ret
 1ac:	41 30       	cpi	r20, 0x01	; 1
 1ae:	59 f4       	brne	.+22     	; 0x1c6 <DIO_write+0x64>
 1b0:	28 b3       	in	r18, 0x18	; 24
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_write+0x5a>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_write+0x56>
 1c0:	82 2b       	or	r24, r18
 1c2:	88 bb       	out	0x18, r24	; 24
 1c4:	08 95       	ret
 1c6:	28 b3       	in	r18, 0x18	; 24
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_write+0x70>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_write+0x6c>
 1d6:	80 95       	com	r24
 1d8:	82 23       	and	r24, r18
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	08 95       	ret
 1de:	41 30       	cpi	r20, 0x01	; 1
 1e0:	59 f4       	brne	.+22     	; 0x1f8 <DIO_write+0x96>
 1e2:	25 b3       	in	r18, 0x15	; 21
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_write+0x8c>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_write+0x88>
 1f2:	82 2b       	or	r24, r18
 1f4:	85 bb       	out	0x15, r24	; 21
 1f6:	08 95       	ret
 1f8:	25 b3       	in	r18, 0x15	; 21
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_write+0xa2>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_write+0x9e>
 208:	80 95       	com	r24
 20a:	82 23       	and	r24, r18
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	08 95       	ret
 210:	41 30       	cpi	r20, 0x01	; 1
 212:	59 f4       	brne	.+22     	; 0x22a <DIO_write+0xc8>
 214:	22 b3       	in	r18, 0x12	; 18
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_write+0xbe>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_write+0xba>
 224:	82 2b       	or	r24, r18
 226:	82 bb       	out	0x12, r24	; 18
 228:	08 95       	ret
 22a:	22 b3       	in	r18, 0x12	; 18
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_write+0xd4>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_write+0xd0>
 23a:	80 95       	com	r24
 23c:	82 23       	and	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret

00000242 <DIO_write_port>:
		default: break;
	}
}
void DIO_write_port(uint8 portname,uint8 portvalue)
{
	switch(portname)
 242:	82 34       	cpi	r24, 0x42	; 66
 244:	59 f0       	breq	.+22     	; 0x25c <DIO_write_port+0x1a>
 246:	18 f4       	brcc	.+6      	; 0x24e <DIO_write_port+0xc>
 248:	81 34       	cpi	r24, 0x41	; 65
 24a:	31 f0       	breq	.+12     	; 0x258 <DIO_write_port+0x16>
 24c:	08 95       	ret
 24e:	83 34       	cpi	r24, 0x43	; 67
 250:	39 f0       	breq	.+14     	; 0x260 <DIO_write_port+0x1e>
 252:	84 34       	cpi	r24, 0x44	; 68
 254:	39 f0       	breq	.+14     	; 0x264 <DIO_write_port+0x22>
 256:	08 95       	ret
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 258:	6b bb       	out	0x1b, r22	; 27
		break ;
 25a:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 25c:	68 bb       	out	0x18, r22	; 24
		break ;
 25e:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 260:	65 bb       	out	0x15, r22	; 21
		break ;
 262:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 264:	62 bb       	out	0x12, r22	; 18
 266:	08 95       	ret

00000268 <send_falling_edge>:


static void send_falling_edge(void)
{
	/* to enable printing the sent character to LCD ,we should send send falling edge to the lcd*/
	DIO_write(LCD_CONTROL_PORT,LCD_EN_PIN,1); // set enable pin to one
 268:	41 e0       	ldi	r20, 0x01	; 1
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	82 e4       	ldi	r24, 0x42	; 66
 26e:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	8f e9       	ldi	r24, 0x9F	; 159
 274:	9f e0       	ldi	r25, 0x0F	; 15
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <send_falling_edge+0xe>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <send_falling_edge+0x14>
 27c:	00 00       	nop
	_delay_ms(2); //period of high
	DIO_write(LCD_CONTROL_PORT,LCD_EN_PIN,0); // clear enable pin
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	82 e4       	ldi	r24, 0x42	; 66
 284:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_write>
 288:	8f e9       	ldi	r24, 0x9F	; 159
 28a:	9f e0       	ldi	r25, 0x0F	; 15
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <send_falling_edge+0x24>
 290:	00 c0       	rjmp	.+0      	; 0x292 <send_falling_edge+0x2a>
 292:	00 00       	nop
 294:	08 95       	ret

00000296 <LCD_vSend_cmd>:
	_delay_ms(2); // period of low
}
void LCD_vSend_cmd(uint8 cmd)
{
	#if defined eight_bits_mode //depend on pre-defined configurations which exist in lcd_config.h
	DIO_write_port(LCD_PORT,cmd); //send the command to LCD
 296:	68 2f       	mov	r22, r24
 298:	81 e4       	ldi	r24, 0x41	; 65
 29a:	0e 94 21 01 	call	0x242	; 0x242 <DIO_write_port>
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,0); //enable LCD to receive command
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	82 e4       	ldi	r24, 0x42	; 66
 2a4:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_write>
	send_falling_edge(); //send falling edge
 2a8:	0e 94 34 01 	call	0x268	; 0x268 <send_falling_edge>
 2ac:	08 95       	ret

000002ae <LCD_vInit>:

void LCD_vInit(void)
{
	#if defined eight_bits_mode //depend on pre-defined configurations which exist in lcd_config.h
	/* set LCD pins as output pins in case of 8 bit LCD*/
	DIO_vsetPINDir(LCD_PORT,LCD_FIRST_PIN,1);
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	81 e4       	ldi	r24, 0x41	; 65
 2b4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SECOND_PIN,1);
 2b8:	41 e0       	ldi	r20, 0x01	; 1
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	81 e4       	ldi	r24, 0x41	; 65
 2be:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_THIRD_PIN,1);
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	62 e0       	ldi	r22, 0x02	; 2
 2c6:	81 e4       	ldi	r24, 0x41	; 65
 2c8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_FOURTH_PIN,1);
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	63 e0       	ldi	r22, 0x03	; 3
 2d0:	81 e4       	ldi	r24, 0x41	; 65
 2d2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_FIFTH_PIN,1);
 2d6:	41 e0       	ldi	r20, 0x01	; 1
 2d8:	64 e0       	ldi	r22, 0x04	; 4
 2da:	81 e4       	ldi	r24, 0x41	; 65
 2dc:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SIXTH_PIN,1);
 2e0:	41 e0       	ldi	r20, 0x01	; 1
 2e2:	65 e0       	ldi	r22, 0x05	; 5
 2e4:	81 e4       	ldi	r24, 0x41	; 65
 2e6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SEVENTH_PIN,1);
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	66 e0       	ldi	r22, 0x06	; 6
 2ee:	81 e4       	ldi	r24, 0x41	; 65
 2f0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_EIGHTH_PIN,1);
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	67 e0       	ldi	r22, 0x07	; 7
 2f8:	81 e4       	ldi	r24, 0x41	; 65
 2fa:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	/*****************************/
	/* set LCD control pins as output pins in case of 8 bit LCD */
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_EN_PIN,1);
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	82 e4       	ldi	r24, 0x42	; 66
 304:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_RW_PIN,1);
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	62 e0       	ldi	r22, 0x02	; 2
 30c:	82 e4       	ldi	r24, 0x42	; 66
 30e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_RS_PIN,1);
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	82 e4       	ldi	r24, 0x42	; 66
 318:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	/*****************************/
	DIO_write(LCD_CONTROL_PORT,LCD_RW_PIN,0); // enable write to LCD
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	62 e0       	ldi	r22, 0x02	; 2
 320:	82 e4       	ldi	r24, 0x42	; 66
 322:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_write>
	LCD_vSend_cmd(EIGHT_BIT_MODE); //enable 8 bit LCD Mode
 326:	88 e3       	ldi	r24, 0x38	; 56
 328:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_vSend_cmd>
	LCD_vSend_cmd(CLR_SCREEN); // CLR LCD screen
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_vSend_cmd>
	LCD_vSend_cmd(DISPLAY_ON_CURSOR_ON); // enable cursor and display on
 332:	8e e0       	ldi	r24, 0x0E	; 14
 334:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_vSend_cmd>
 338:	8f e1       	ldi	r24, 0x1F	; 31
 33a:	9e e4       	ldi	r25, 0x4E	; 78
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <LCD_vInit+0x8e>
 340:	00 c0       	rjmp	.+0      	; 0x342 <LCD_vInit+0x94>
 342:	00 00       	nop
 344:	08 95       	ret

00000346 <LCD_vSend_char>:
	
}
void LCD_vSend_char(uint8 data)
{
	#if defined eight_bits_mode //depend on pre-defined configurations which exist in lcd_config.h
	DIO_write_port(LCD_PORT,data); //send the data to LCD
 346:	68 2f       	mov	r22, r24
 348:	81 e4       	ldi	r24, 0x41	; 65
 34a:	0e 94 21 01 	call	0x242	; 0x242 <DIO_write_port>
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,1); //enable LCD to receive data
 34e:	41 e0       	ldi	r20, 0x01	; 1
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	82 e4       	ldi	r24, 0x42	; 66
 354:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_write>
	send_falling_edge(); //send falling edge
 358:	0e 94 34 01 	call	0x268	; 0x268 <send_falling_edge>
 35c:	08 95       	ret

0000035e <LCD_vSend_string>:
	/******************************************/
	#endif
}

void LCD_vSend_string(char *data)
{
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	ec 01       	movw	r28, r24
	while((*data)!=0) //keep in the loop until the end of the string
 364:	03 c0       	rjmp	.+6      	; 0x36c <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data); // print the characters of the string
 366:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_vSend_char>
		data++; // make the pointer points to the next character
 36a:	21 96       	adiw	r28, 0x01	; 1
	#endif
}

void LCD_vSend_string(char *data)
{
	while((*data)!=0) //keep in the loop until the end of the string
 36c:	88 81       	ld	r24, Y
 36e:	81 11       	cpse	r24, r1
 370:	fa cf       	rjmp	.-12     	; 0x366 <LCD_vSend_string+0x8>
	{
		LCD_vSend_char(*data); // print the characters of the string
		data++; // make the pointer points to the next character
	}
}
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <LCD_clearscreen>:

void LCD_clearscreen(void)
{
	LCD_vSend_cmd(CLR_SCREEN); // clear the screen
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_vSend_cmd>
 37e:	08 95       	ret

00000380 <LCD_movecursor>:
	{
		data=0x80;
	}
	/********************************************/
	/*set the postion of cursor depend on the selected row and coloumn*/
	if(row==1)
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	19 f4       	brne	.+6      	; 0x38a <LCD_movecursor+0xa>
	{
		data=0x80+coloumn-1 ;
 384:	8f e7       	ldi	r24, 0x7F	; 127
 386:	86 0f       	add	r24, r22
 388:	06 c0       	rjmp	.+12     	; 0x396 <LCD_movecursor+0x16>
	}
	else if (row==2)
 38a:	82 30       	cpi	r24, 0x02	; 2
 38c:	19 f4       	brne	.+6      	; 0x394 <LCD_movecursor+0x14>
	{
		data=0xc0+coloumn-1;
 38e:	8f eb       	ldi	r24, 0xBF	; 191
 390:	86 0f       	add	r24, r22
 392:	01 c0       	rjmp	.+2      	; 0x396 <LCD_movecursor+0x16>
 394:	80 e8       	ldi	r24, 0x80	; 128
	}
	/**************************************/
	
	LCD_vSend_cmd(data); //set the position  of the cursor
 396:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_vSend_cmd>
 39a:	08 95       	ret

0000039c <main>:
#include "LCD.h"


int main(void)
{
	LCD_vInit();
 39c:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_vInit>
/* Printing Welcome screen */
LCD_vSend_string("Welcome to smart");
 3a0:	80 e6       	ldi	r24, 0x60	; 96
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_vSend_string>
LCD_movecursor(2,1);
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_movecursor>
LCD_vSend_string("home system");
 3b0:	81 e7       	ldi	r24, 0x71	; 113
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_vSend_string>
 3b8:	2f ef       	ldi	r18, 0xFF	; 255
 3ba:	89 e6       	ldi	r24, 0x69	; 105
 3bc:	98 e1       	ldi	r25, 0x18	; 24
 3be:	21 50       	subi	r18, 0x01	; 1
 3c0:	80 40       	sbci	r24, 0x00	; 0
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <main+0x22>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <main+0x2c>
 3c8:	00 00       	nop
_delay_ms(1000);//Halt the system for the given time in (ms)
LCD_clearscreen();//remove all previous    while (1) 
 3ca:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_clearscreen>
    {
    }
}
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	08 95       	ret

000003d4 <_exit>:
 3d4:	f8 94       	cli

000003d6 <__stop_program>:
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <__stop_program>
